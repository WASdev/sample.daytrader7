<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="DayTrader" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(THREADS,50)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(RAMP,0)}</stringProp>
        <longProp name="ThreadGroup.start_time">1355173676000</longProp>
        <longProp name="ThreadGroup.end_time">1355173676000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">${__P(DURATION, 180)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          <stringProp name="CookieManager.policy">rfc2109</stringProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; SV1; .NET CLR 1.1.4322)</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-us</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="VIEWSTATE" elementType="Argument">
              <stringProp name="Argument.name">VIEWSTATE</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="jsessionid" elementType="Argument">
              <stringProp name="Argument.name">jsessionid</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="minimumuid" elementType="Argument">
              <stringProp name="Argument.name">minimumuid</stringProp>
              <stringProp name="Argument.value">${__P(BOTUID,0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="maximumuid" elementType="Argument">
              <stringProp name="Argument.name">maximumuid</stringProp>
              <stringProp name="Argument.value">${__P(TOPUID,14999)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hostname" elementType="Argument">
              <stringProp name="Argument.name">hostname</stringProp>
              <stringProp name="Argument.value">${__P(HOST,localhost)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="port" elementType="Argument">
              <stringProp name="Argument.name">port</stringProp>
              <stringProp name="Argument.value">${__P(PORT,9082)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="maxthinkingtime" elementType="Argument">
              <stringProp name="Argument.name">maxthinkingtime</stringProp>
              <stringProp name="Argument.value">${__P(MAXTHINKTIME,0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="maximumsid" elementType="Argument">
              <stringProp name="Argument.name">maximumsid</stringProp>
              <stringProp name="Argument.value">${__P(STOCKS,9999)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="protocol" elementType="Argument">
              <stringProp name="Argument.name">protocol</stringProp>
              <stringProp name="Argument.value">${__P(PROTOCOL,http)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">http | https</stringProp>
            </elementProp>
            <elementProp name="websocket_timeout" elementType="Argument">
              <stringProp name="Argument.name">websocket_timeout</stringProp>
              <stringProp name="Argument.value">${__P(WEBSOCKET_TIMEOUT,60)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">${minimumuid}</stringProp>
          <stringProp name="CounterConfig.end">${maximumuid}</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">logincounter</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WS2" enabled="true"/>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If http" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${protocol}&quot;== &quot;http&quot;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WS2 Open Initial Connection http" enabled="true">
                  <boolProp name="TLS">false</boolProp>
                  <stringProp name="server">${hostname}</stringProp>
                  <stringProp name="port">${port}</stringProp>
                  <stringProp name="path">/daytrader/marketsummary</stringProp>
                  <stringProp name="readTimeout">20000</stringProp>
                  <stringProp name="connectTimeout">20000</stringProp>
                </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If https" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${protocol}&quot;== &quot;https&quot;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WS2 Open Initial Connection https" enabled="true">
                  <boolProp name="TLS">true</boolProp>
                  <stringProp name="server">${hostname}</stringProp>
                  <stringProp name="port">${port}</stringProp>
                  <stringProp name="path">/daytrader/marketsummary</stringProp>
                  <stringProp name="readTimeout">20000</stringProp>
                  <stringProp name="connectTimeout">20000</stringProp>
                </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="WS2 Set Initial Timeout" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def StartTime = new Date() 
use(groovy.time.TimeCategory) {
	def webSocketTimeout = vars.get(&quot;websocket_timeout&quot;) as Integer
	def duration = new groovy.time.TimeDuration(0, 0, webSocketTimeout, 0) 
   	def EndTime = StartTime + duration
     vars.put(&quot;EndTime&quot;, EndTime.getTime() as String)
     
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="WS2 Get Current Time" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def CurrentTime = new Date() 
use(groovy.time.TimeCategory) {
        vars.put(&quot;CurrentTime&quot;, CurrentTime.getTime() as String)

         
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Check Timeout" enabled="true">
              <stringProp name="IfController.condition">${__groovy((vars.get(&apos;CurrentTime&apos;) as long) - (vars.get(&apos;EndTime&apos;) as long) &gt;= 0,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="close with filter" enabled="true"/>
              <hashTree>
                <eu.luminis.jmeter.wssampler.TextFrameFilter guiclass="eu.luminis.jmeter.wssampler.TextFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.TextFrameFilter" testname="ws Text Frame Filter" enabled="true">
                  <stringProp name="comparisonType">IsPlain</stringProp>
                  <stringProp name="TestPlan.comments">filters (i.e. discards) all ws text frames that are received by sampler in its scope</stringProp>
                  <stringProp name="matchValue"></stringProp>
                </eu.luminis.jmeter.wssampler.TextFrameFilter>
                <hashTree/>
                <eu.luminis.jmeter.wssampler.CloseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.CloseWebSocketSampler" testname="WS2 close (filtered frames will show up as sub-result)" enabled="true">
                  <stringProp name="statusCode">1000</stringProp>
                  <stringProp name="readTimeout">6000</stringProp>
                </eu.luminis.jmeter.wssampler.CloseWebSocketSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If http" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${protocol}&quot;== &quot;http&quot;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WS2 Open Connection http" enabled="true">
                  <boolProp name="TLS">false</boolProp>
                  <stringProp name="server">${hostname}</stringProp>
                  <stringProp name="port">${port}</stringProp>
                  <stringProp name="path">/daytrader/marketsummary</stringProp>
                  <stringProp name="readTimeout">20000</stringProp>
                  <stringProp name="connectTimeout">20000</stringProp>
                </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If https" enabled="true">
                <stringProp name="IfController.condition">${__jexl3(&quot;${protocol}&quot;== &quot;https&quot;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WS2 Open Connection https" enabled="true">
                  <boolProp name="TLS">true</boolProp>
                  <stringProp name="server">${hostname}</stringProp>
                  <stringProp name="port">${port}</stringProp>
                  <stringProp name="path">/daytrader/marketsummary</stringProp>
                  <stringProp name="readTimeout">20000</stringProp>
                  <stringProp name="connectTimeout">20000</stringProp>
                </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="WS2 Set Timeout" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def StartTime = new Date() 
use(groovy.time.TimeCategory) {
	def webSocketTimeout = vars.get(&quot;websocket_timeout&quot;) as Integer
	def duration = new groovy.time.TimeDuration(0, 0, webSocketTimeout, 0) 
   	def EndTime = StartTime + duration
     vars.put(&quot;EndTime&quot;, EndTime.getTime() as String)
     
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </RandomController>
          <hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller JSF" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">true</boolProp>
              <intProp name="ThroughputController.maxThroughput">50</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>10.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WelcomePing JSF" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/daytrader/welcome.faces</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login JSF" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${jsfViewState}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                    </elementProp>
                    <elementProp name="login:password" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">xxx</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">login:password</stringProp>
                    </elementProp>
                    <elementProp name="login:submit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Log in</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">login:submit</stringProp>
                    </elementProp>
                    <elementProp name="login:uid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">uid:${logincounter}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">login:uid</stringProp>
                    </elementProp>
                    <elementProp name="login" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">login</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">login</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/daytrader/welcome.faces</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="loop=true" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="3327652">loop</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="1902774694">
                      <stringProp name="3569038">true</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">true</boolProp>
                </UserParameters>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1024322212">Ready to Trade</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${loop}</stringProp>
              </WhileController>
              <hashTree>
                <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="true">
                  <intProp name="InterleaveControl.style">1</intProp>
                </RandomController>
                <hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Quotes_JSF" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>36.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QuotesPing JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/quote.faces</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Quotes JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${jsfViewState}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                          </elementProp>
                          <elementProp name="quotes:symbols" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">s:${__Random(0,${maximumsid},)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:symbols</stringProp>
                          </elementProp>
                          <elementProp name="quotes:submit" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">quotes</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:submit</stringProp>
                          </elementProp>
                          <elementProp name="quotes" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">quotes</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes</stringProp>
                          </elementProp>
                          <elementProp name="quotes:quotes:0:quantity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">100</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:quotes:0:quantity</stringProp>
                          </elementProp>
                          <elementProp name="quotes:quotes:1:quantity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">100</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:quotes:1:quantity</stringProp>
                          </elementProp>
                          <elementProp name="quotes:quotes:2:quantity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">100</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:quotes:2:quantity</stringProp>
                          </elementProp>
                          <elementProp name="quotes:quotes:3:quantity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">100</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:quotes:3:quantity</stringProp>
                          </elementProp>
                          <elementProp name="quotes:quotes:4:quantity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">100</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:quotes:4:quantity</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/quote.faces</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="789765197">DayTrader Quotes</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Home_JSF" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>16.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Home JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/tradehome.faces</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Portfolio_JSF" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>15.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Portfolio JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/portfolio.faces</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Account_JSF" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>10.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Account JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/account.faces</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Buy_JSF" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>4.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QuotePing JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/quote.faces</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Quotes JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${jsfViewState}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                          </elementProp>
                          <elementProp name="quotes:symbols" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">s:${__Random(0,${maximumsid},)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:symbols</stringProp>
                          </elementProp>
                          <elementProp name="quotes:submit" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">quotes</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:submit</stringProp>
                          </elementProp>
                          <elementProp name="quotes" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">quotes</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes</stringProp>
                          </elementProp>
                          <elementProp name="quotes:quotes:0:quantity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">100</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:quotes:0:quantity</stringProp>
                          </elementProp>
                          <elementProp name="quotes:quotes:1:quantity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">100</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:quotes:1:quantity</stringProp>
                          </elementProp>
                          <elementProp name="quotes:quotes:2:quantity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">100</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:quotes:2:quantity</stringProp>
                          </elementProp>
                          <elementProp name="quotes:quotes:3:quantity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">100</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:quotes:3:quantity</stringProp>
                          </elementProp>
                          <elementProp name="quotes:quotes:4:quantity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">100</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:quotes:4:quantity</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/quote.faces</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="789765197">DayTrader Quotes</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Stock" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">tobuy</stringProp>
                        <stringProp name="RegexExtractor.regex">s:([0-9]+)</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">0</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Buy JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${jsfViewState}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                          </elementProp>
                          <elementProp name="quotes:symbols" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">s:${tobuy}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:symbols</stringProp>
                          </elementProp>
                          <elementProp name="quotes:quotes:0:quantity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${__Random(1,200)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:quotes:0:quantity</stringProp>
                          </elementProp>
                          <elementProp name="quotes:quotes:0:buy" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">buy</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes:quotes:0:buy</stringProp>
                          </elementProp>
                          <elementProp name="quotes" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">quotes</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quotes</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/quote.faces</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="837442055">been submitted</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Sell_JSF" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>4.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PortfolioPing JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/portfolio.faces</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Holdings" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">numHoldings</stringProp>
                        <stringProp name="RegexExtractor.regex">of Holdings: &lt;/b&gt;([1-9][0-9]*)&lt;/td&gt;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">0</stringProp>
                        <stringProp name="RegexExtractor.match_number">0</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="doSell" enabled="true">
                      <stringProp name="IfController.condition">${__jexl(&quot;${numHoldings}&quot; != &quot;0&quot;)}</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                      <boolProp name="IfController.useExpression">true</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sell JSF" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">${jsfViewState}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                            </elementProp>
                            <elementProp name="portfolio:holdings:0:sell" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">portfolio:holdings:0:sell</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">portfolio:holdings:0:sell</stringProp>
                            </elementProp>
                            <elementProp name="portfolio" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">portfolio</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">portfolio</stringProp>
                            </elementProp>
                            <elementProp name="portfolio:symbols" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">s:0,s:1,s:2,s:3,s:4</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">portfolio:symbols</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                        <stringProp name="HTTPSampler.port">${port}</stringProp>
                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/daytrader/portfolio.faces</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="837442055">been submitted</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">2</intProp>
                          <stringProp name="Assertion.custom_message"></stringProp>
                        </ResponseAssertion>
                        <hashTree/>
                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                        </ConstantTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Update_JSF" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>2.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Account JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/account.faces</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Profile JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${jsfViewState}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                          </elementProp>
                          <elementProp name="updateProfile:uid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">uid:${logincounter}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">updateProfile:uid</stringProp>
                          </elementProp>
                          <elementProp name="updateProfile:fullname" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">rnd${__threadNum}${logincounter}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">updateProfile:fullname</stringProp>
                          </elementProp>
                          <elementProp name="updateProfile:password" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">xxx</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">updateProfile:password</stringProp>
                          </elementProp>
                          <elementProp name="updateProfile:address" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">rndAddress</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">updateProfile:address</stringProp>
                          </elementProp>
                          <elementProp name="updateProfile:cpassword" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">xxx</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">updateProfile:cpassword</stringProp>
                          </elementProp>
                          <elementProp name="updateProfile:ccn" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">rndCC</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">updateProfile:ccn</stringProp>
                          </elementProp>
                          <elementProp name="updateProfile:email" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">rndEmail</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">updateProfile:email</stringProp>
                          </elementProp>
                          <elementProp name="updateProfile" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">updateProfile</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">updateProfile</stringProp>
                          </elementProp>
                          <elementProp name="updateProfile:submit" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">Update Profile</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">updateProfile:submit</stringProp>
                          </elementProp>
                          <elementProp name="updateProfile:symbols" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">s:0,s:1,s:2,s:3,s:4</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">updateProfile:symbols</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/account.faces</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Register_JSF" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>1.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HomePing JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/tradehome.faces</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logout JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${jsfViewState}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                          </elementProp>
                          <elementProp name="tradeHome:logoff" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">tradeHome:logoff</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tradeHome:logoff</stringProp>
                          </elementProp>
                          <elementProp name="tradeHome:symbols" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">s:1,s:2,s:3,s:4</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tradeHome:symbols</stringProp>
                          </elementProp>
                          <elementProp name="tradeHome" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">tradeHome</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tradeHome</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/tradehome.faces</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1129050579">DayTrader Login</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterPing" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/register.faces</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${jsfViewState}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                          </elementProp>
                          <elementProp name="register:fullname" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">first:${__Random(0,999,)} last:${__Random(0,4999,)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">register:fullname</stringProp>
                          </elementProp>
                          <elementProp name="register:address" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">first:${__Random(0,999,)} last:${__Random(0,4999,)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">register:address</stringProp>
                          </elementProp>
                          <elementProp name="register:email" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">uid:${logincounter}@${__Random(0,100,)}.com</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">register:email</stringProp>
                          </elementProp>
                          <elementProp name="register:uid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">ru:${logincounter}${__threadNum}:${__time(HMS)}${__Random(0,999,)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">register:uid</stringProp>
                          </elementProp>
                          <elementProp name="register:password" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">yyy</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">register:password</stringProp>
                          </elementProp>
                          <elementProp name="register:cpassword" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">yyy</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">register:cpassword</stringProp>
                          </elementProp>
                          <elementProp name="register:money" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">1000000</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">register:money</stringProp>
                          </elementProp>
                          <elementProp name="register:ccn" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">123-fake-ccnum-456</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">register:ccn</stringProp>
                          </elementProp>
                          <elementProp name="register" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">register</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">register</stringProp>
                          </elementProp>
                          <elementProp name="register:submit" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">Register</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">register:submit</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/register.faces</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="874613025">Registration operation succeeded</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HomePing JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/tradehome.faces</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logout JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${jsfViewState}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                          </elementProp>
                          <elementProp name="tradeHome:logoff" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">tradeHome:logoff</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tradeHome:logoff</stringProp>
                          </elementProp>
                          <elementProp name="tradeHome:symbols" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">s:1,s:2,s:3,s:4</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tradeHome:symbols</stringProp>
                          </elementProp>
                          <elementProp name="tradeHome" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">tradeHome</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tradeHome</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/tradehome.faces</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1129050579">DayTrader Login</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="loop=false" enabled="true">
                      <collectionProp name="UserParameters.names">
                        <stringProp name="3327652">loop</stringProp>
                      </collectionProp>
                      <collectionProp name="UserParameters.thread_values">
                        <collectionProp name="-544885953">
                          <stringProp name="97196323">false</stringProp>
                        </collectionProp>
                      </collectionProp>
                      <boolProp name="UserParameters.per_iteration">false</boolProp>
                    </UserParameters>
                    <hashTree/>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Logout_JSF" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>4.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HomePing JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/tradehome.faces</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logout JSF" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="javax.faces.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${jsfViewState}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">javax.faces.ViewState</stringProp>
                          </elementProp>
                          <elementProp name="tradeHome:logoff" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">tradeHome:logoff</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tradeHome:logoff</stringProp>
                          </elementProp>
                          <elementProp name="tradeHome:symbols" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">s:0,s:1,s:2,s:3,s:4</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tradeHome:symbols</stringProp>
                          </elementProp>
                          <elementProp name="tradeHome" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">tradeHome</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">tradeHome</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/tradehome.faces</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1129050579">DayTrader Login</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="loop=false" enabled="true">
                      <collectionProp name="UserParameters.names">
                        <stringProp name="3327652">loop</stringProp>
                      </collectionProp>
                      <collectionProp name="UserParameters.thread_values">
                        <collectionProp name="-544885953">
                          <stringProp name="97196323">false</stringProp>
                        </collectionProp>
                      </collectionProp>
                      <boolProp name="UserParameters.per_iteration">false</boolProp>
                    </UserParameters>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GetViewState" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">jsfViewState</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;input type=&quot;hidden&quot; name=&quot;javax\.faces\.ViewState&quot; .* value=&quot;([^&quot;]+)&quot;.*/&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller JSP" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">true</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <FloatProperty>
                <name>ThroughputController.percentThroughput</name>
                <value>90.0</value>
                <savedValue>0.0</savedValue>
              </FloatProperty>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="uid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">uid:${logincounter}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">uid</stringProp>
                    </elementProp>
                    <elementProp name="passwd" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">xxx</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">passwd</stringProp>
                    </elementProp>
                    <elementProp name="action" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">login</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">action</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="loop=true" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="3327652">loop</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="1902774694">
                      <stringProp name="3569038">true</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">true</boolProp>
                </UserParameters>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-487279901">Welcome to DayTrader</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${loop}</stringProp>
              </WhileController>
              <hashTree>
                <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="true">
                  <intProp name="InterleaveControl.style">1</intProp>
                </RandomController>
                <hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Quotes" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>36.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Quotes" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="action" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">quotes</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">action</stringProp>
                          </elementProp>
                          <elementProp name="symbol" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">s:${__Random(0,${maximumsid},)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">symbol</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1494573439">DayTrader: Quotes and Trading</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Home" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>16.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Home" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="action" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">home</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">action</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Portfolio" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>15.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Portfolio" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="action" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">portfolio</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">action</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Account" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>10.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Account" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="action" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">account</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">action</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="MarketSummary" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>8.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <eu.luminis.jmeter.wssampler.TextFrameFilter guiclass="eu.luminis.jmeter.wssampler.TextFrameFilterGui" testclass="eu.luminis.jmeter.wssampler.TextFrameFilter" testname="ws Text Frame Filter" enabled="true">
                      <stringProp name="comparisonType">StartsWith</stringProp>
                      <stringProp name="TestPlan.comments">filters (i.e. discards) all ws text frames that are received by sampler in its scope</stringProp>
                      <stringProp name="matchValue">{&quot;change1_stock&quot;</stringProp>
                    </eu.luminis.jmeter.wssampler.TextFrameFilter>
                    <hashTree/>
                    <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="WS2 existing" enabled="true">
                      <boolProp name="createNewConnection">false</boolProp>
                      <boolProp name="TLS">false</boolProp>
                      <stringProp name="server">${hostname}</stringProp>
                      <stringProp name="port">${port}</stringProp>
                      <stringProp name="path">/daytrader/marketsummary</stringProp>
                      <boolProp name="binaryPayload">false</boolProp>
                      <stringProp name="requestData">{&quot;action&quot;:&quot;update&quot;}</stringProp>
                      <stringProp name="readTimeout">2000</stringProp>
                      <stringProp name="TestPlan.comments">use existing open connection </stringProp>
                      <stringProp name="connectTimeout">20000</stringProp>
                      <stringProp name="payloadType">Text</stringProp>
                      <boolProp name="loadDataFromFile">false</boolProp>
                      <stringProp name="dataFile"></stringProp>
                    </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-1253346196">gainer</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Buy" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>4.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Quotes" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="action" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">quotes</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">action</stringProp>
                          </elementProp>
                          <elementProp name="symbols" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">s:${__Random(0,${maximumsid},tobuy)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">symbols</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Buy" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="action" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">buy</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">action</stringProp>
                          </elementProp>
                          <elementProp name="symbol" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">s:${tobuy}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">symbol</stringProp>
                          </elementProp>
                          <elementProp name="quantity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${__Random(1,200)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">quantity</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="763316301">has been submitted</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Sell" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>4.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Portfolio" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="action" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">portfolio</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">action</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="First_holdingID" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">firstHoldingID</stringProp>
                        <stringProp name="RegexExtractor.regex">holdingID=([0-9]+)</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NotFound</stringProp>
                        <stringProp name="RegexExtractor.match_number">0</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="First_holdingID_BOOL" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">firstHoldingIDBool</stringProp>
                        <stringProp name="RegexExtractor.regex">holdingID=([0-9]+)</stringProp>
                        <stringProp name="RegexExtractor.template">true</stringProp>
                        <stringProp name="RegexExtractor.default">false</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="doSell" enabled="true">
                      <stringProp name="IfController.condition">${firstHoldingIDBool}</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                      <boolProp name="IfController.useExpression">true</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sell" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="action" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">sell</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">action</stringProp>
                            </elementProp>
                            <elementProp name="holdingID" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">${firstHoldingID}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">holdingID</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                        <stringProp name="HTTPSampler.port">${port}</stringProp>
                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="763316301">has been submitted</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">2</intProp>
                          <stringProp name="Assertion.custom_message"></stringProp>
                        </ResponseAssertion>
                        <hashTree/>
                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                        </ConstantTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Update" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>2.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Account" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="action" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">account</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">action</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Profile" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="action" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">update_profile</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">action</stringProp>
                          </elementProp>
                          <elementProp name="userID" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">uid:${logincounter}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">userID</stringProp>
                          </elementProp>
                          <elementProp name="fullname" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">rnd${__threadNum}${logincounter}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">fullname</stringProp>
                          </elementProp>
                          <elementProp name="password" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">xxx</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">password</stringProp>
                          </elementProp>
                          <elementProp name="address" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">rndAddress</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">address</stringProp>
                          </elementProp>
                          <elementProp name="cpassword" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">xxx</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">cpassword</stringProp>
                          </elementProp>
                          <elementProp name="creditcard" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">rndCC</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">creditcard</stringProp>
                          </elementProp>
                          <elementProp name="email" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">rndEmail</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">email</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Register" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>1.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logout" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="action" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">logout</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">action</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register Page" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/register.jsp</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="action" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">register</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">action</stringProp>
                          </elementProp>
                          <elementProp name="Full Name" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">first:${__Random(0,999,)} last:${__Random(0,4999,)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">Full Name</stringProp>
                          </elementProp>
                          <elementProp name="snail mail" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">first:${__Random(0,999,)} last:${__Random(0,4999,)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">snail mail</stringProp>
                          </elementProp>
                          <elementProp name="email" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">uid:${logincounter}@${__Random(0,100,)}.com</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">email</stringProp>
                          </elementProp>
                          <elementProp name="user id" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">ru:${logincounter}${__threadNum}:${__time(HMS)}${__Random(0,999,)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">user id</stringProp>
                          </elementProp>
                          <elementProp name="passwd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">yyy</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">passwd</stringProp>
                          </elementProp>
                          <elementProp name="confirm passwd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">yyy</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">confirm passwd</stringProp>
                          </elementProp>
                          <elementProp name="money" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">1000000</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">money</stringProp>
                          </elementProp>
                          <elementProp name="Credit Card Number" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">123-fake-ccnum-456</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">Credit Card Number</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logout" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="action" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">logout</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">action</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                    <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="loop=false" enabled="true">
                      <collectionProp name="UserParameters.names">
                        <stringProp name="3327652">loop</stringProp>
                      </collectionProp>
                      <collectionProp name="UserParameters.thread_values">
                        <collectionProp name="-544885953">
                          <stringProp name="97196323">false</stringProp>
                        </collectionProp>
                      </collectionProp>
                      <boolProp name="UserParameters.per_iteration">false</boolProp>
                    </UserParameters>
                    <hashTree/>
                  </hashTree>
                  <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Logout" enabled="true">
                    <intProp name="ThroughputController.style">1</intProp>
                    <boolProp name="ThroughputController.perThread">true</boolProp>
                    <intProp name="ThroughputController.maxThroughput">1</intProp>
                    <FloatProperty>
                      <name>ThroughputController.percentThroughput</name>
                      <value>4.0</value>
                      <savedValue>0.0</savedValue>
                    </FloatProperty>
                  </ThroughputController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logout" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="action" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">logout</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">action</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${hostname}</stringProp>
                      <stringProp name="HTTPSampler.port">${port}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/daytrader/app</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                        <stringProp name="ConstantTimer.delay">${maxthinkingtime}</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1129050579">DayTrader Login</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="loop=false" enabled="true">
                      <collectionProp name="UserParameters.names">
                        <stringProp name="3327652">loop</stringProp>
                      </collectionProp>
                      <collectionProp name="UserParameters.thread_values">
                        <collectionProp name="-544885953">
                          <stringProp name="97196323">false</stringProp>
                        </collectionProp>
                      </collectionProp>
                      <boolProp name="UserParameters.per_iteration">false</boolProp>
                    </UserParameters>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename">C:\jmeter\jmeter_script\report.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
